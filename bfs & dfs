-------------------bfs---------------
#include<bits/stdc++.h>
using namespace std;
vector<int> edges[10000];
bool visited[10000];
void bfs(){
	queue<int> q;
	q.push(1);
	visited[1] = true;
	while(!q.empty()){
		cout<<q.front();
		for(auto it: edges[q.front()]){
			if(!visited[it]){
			q.push(it);
			visited[it] = 1;
		}
			
		}
		q.pop();
	}
	
}

int main(){
	edges[1].emplace_back(2);
	edges[2].emplace_back(1);
	edges[1].emplace_back(3);
	edges[3].emplace_back(1);
	edges[1].emplace_back(5);
	edges[5].emplace_back(1);
	edges[2].emplace_back(4);
	edges[4].emplace_back(2);
	edges[5].emplace_back(4);
	edges[4].emplace_back(5);
	edges[3].emplace_back(4);
	edges[4].emplace_back(3);
	bfs();
	
}
-----------------------------------dfs--------------------------------
vector<int> edges[10000];
bool visited[100000];
void dfs(int node){
	cout<<node<<" ";
	visited[node] = true;
	for(auto it: edges[node]){
		if(!visited[it]){
			dfs(it);
		}
	}
}


void solve(){
    edges[1].emplace_back(2);
    edges[2].emplace_back(1);
    edges[1].emplace_back(3);
    edges[3].emplace_back(1);
    edges[2].emplace_back(4);
    edges[4].emplace_back(2);
    edges[3].emplace_back(4);
    edges[4].emplace_back(3);
    edges[5].emplace_back(6);
    edges[6].emplace_back(5);
    
    for(int i = 1;i<=6;i++){
    	if(!visited[i]) dfs(i);
    }
   } 
